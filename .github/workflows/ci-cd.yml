name: CI / CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    env:
      Kube_Config: ${{ secrets.KUBE_CONFIG }}
      Docker_User: ${{ secrets.DOCKER_USERNAME }}
      Docker_Password: ${{ secrets.DOCKER_PASSWORD }}
      JWT_Secret: ${{ secrets.JWT_SECRET }}
      RSA_Private: ${{ secrets.RSA_PRIVATE_KEY }}
      Kubernetes: ${{ vars.KUBE_PATH }}
      RSA_Public: ${{ vars.RSA_PUBLIC_KEY }}
      Solution: ${{ vars.SOLUTION_PATH }}
      Gateway: ${{ vars.GATEWAY_API_PATH }}
      Consulta: ${{ vars.CONSULTA_API_PATH }}
      Register: ${{ vars.REGISTER_CONSUMER_PATH }}
      Update: ${{ vars.UPDATE_CONSUMER_PATH }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution }}

    - name: Build API projects
      run: |
        dotnet build ${{ env.Gateway }}/Gateway.csproj --no-restore --configuration Release
        dotnet build ${{ env.Consulta }}/Consulta.csproj --no-restore --configuration Release

    - name: Build Consumer projects
      run: |
        dotnet build ${{ env.Register }}/RegisterConsumer.csproj --no-restore --configuration Release
        dotnet build ${{ env.Update }}/UpdateConsumer.csproj --no-restore --configuration Release

    - name: Build Docker images
      run: |
        docker build -t ${{ env.Docker_User }}/mongo-db:latest -f ${{ env.Kubernetes }}/mongodb/Dockerfile ${{ env.Kubernetes }}/mongodb/
        docker build -t ${{ env.Docker_User }}/gateway-api:latest -f ${{ env.Gateway }}/Dockerfile .
        docker build -t ${{ env.Docker_User }}/consulta-api:latest -f ${{ env.Consulta }}/Dockerfile .
        docker build -t ${{ env.Docker_User }}/register-consumer:latest -f ${{ env.Register }}/Dockerfile .
        docker build -t ${{ env.Docker_User }}/update-consumer:latest -f ${{ env.Update }}/Dockerfile .

    - name: Log in to Docker Registry
      run: echo "${{ env.Docker_Password }}" | docker login -u "${{ env.Docker_User }}" --password-stdin

    - name: Push Docker images
      run: |
        docker push ${{ env.Docker_User }}/mongo-db:latest
        docker push ${{ env.Docker_User }}/gateway-api:latest
        docker push ${{ env.Docker_User }}/consulta-api:latest
        docker push ${{ env.Docker_User }}/register-consumer:latest
        docker push ${{ env.Docker_User }}/update-consumer:latest

    - name: Configure Kubernetes
      run: |
        echo "${{ env.Kube_Config }}" > kubeconfig.yaml
        echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV

    - name: Verify Kubernetes access
      run: |
        kubectl get nodes

    - name: Create Kubernetes Secrets
      run: |
        kubectl delete secret app-secrets --ignore-not-found
        kubectl create secret generic app-secrets \
          --from-literal=jwt-secret='${{ env.JWT_Secret }}' \
          --from-literal=rsa-private-key='${{ env.RSA_Private }}' \
          --from-literal=rsa-public-key='${{ env.RSA_Public }}'

        kubectl create secret docker-registry regcred \
          --docker-server=docker.io \
          --docker-username=${{ env.Docker_User }} \
          --docker-password=${{ env.Docker_Password }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Verify Kubernetes Secrets
      run: kubectl get secrets

    - name: Validate Kubernetes manifests
      run: |
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/gateway-deploy.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/gateway-service.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/consulta-deploy.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/consulta-service.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/register-deploy.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/register-service.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/update-deploy.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/update-service.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/rabbitmq-deploy.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/rabbitmq-service.yaml
        kubectl apply --dry-run=client -f ${{ env.Kubernetes }}/mongo-deploy.yaml
      
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f ${{ env.Kubernetes }}/gateway-deploy.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/gateway-service.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/consulta-deploy.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/consulta-service.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/register-deploy.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/register-service.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/update-deploy.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/update-service.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/rabbitmq-deploy.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/rabbitmq-service.yaml && \
        kubectl apply -f ${{ env.Kubernetes }}/mongo-deploy.yaml